"use strict";(self.webpackChunkevcc_docs=self.webpackChunkevcc_docs||[]).push([[6570],{29041:(e,n,r)=>{r.d(n,{Ay:()=>o,RM:()=>t});var c=r(74848),i=r(28453);const t=[];function s(e){const n={a:"a",admonition:"admonition",p:"p",...(0,i.R)(),...e.components};return(0,c.jsx)(n.admonition,{title:"Sponsor Token Required",type:"tip",children:(0,c.jsxs)(n.p,{children:["More information on \ud83d\udc9a evcc Sponsorship can be found ",(0,c.jsx)(n.a,{href:"/docs/sponsorship",children:"here"}),"."]})})}function o(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(s,{...e})}):s(e)}},18234:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>l,frontMatter:()=>t,metadata:()=>o,toc:()=>d});var c=r(74848),i=r(28453);r(29041);const t={sidebar_position:4},s="chargers",o={id:"reference/configuration/chargers",title:"chargers",description:"To control the charging process, evcc must be able to communicate with a charger.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/reference/configuration/chargers.mdx",sourceDirName:"reference/configuration",slug:"/reference/configuration/chargers",permalink:"/en/docs/reference/configuration/chargers",draft:!1,unlisted:!1,editUrl:"https://github.com/evcc-io/docs/tree/main/i18n/en/docusaurus-plugin-content-docs/current/reference/configuration/chargers.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"loadpoints",permalink:"/en/docs/reference/configuration/loadpoints"},next:{title:"meters",permalink:"/en/docs/reference/configuration/meters"}},a={},d=[{value:"Required Parameters",id:"required-parameters",level:2},{value:"<code>name</code>",id:"name",level:3},{value:"<code>type</code>",id:"type",level:3},{value:"Optional Parameters",id:"optional-parameters",level:2},{value:"<code>integrateddevice</code>",id:"integrateddevice",level:3}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.h1,{id:"chargers",children:(0,c.jsx)(n.code,{children:"chargers"})}),"\n",(0,c.jsx)(n.p,{children:"To control the charging process, evcc must be able to communicate with a charger."}),"\n",(0,c.jsx)(n.p,{children:"A charger must have at least the following configuration:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-yaml",children:"chargers:\n  - name: charger1 # reference name\n    type: ...\n    ...\n"})}),"\n",(0,c.jsx)(n.p,{children:"Below, the possible parameters are explained."}),"\n",(0,c.jsx)(n.hr,{}),"\n",(0,c.jsx)(n.h2,{id:"required-parameters",children:"Required Parameters"}),"\n",(0,c.jsx)(n.h3,{id:"name",children:(0,c.jsx)(n.code,{children:"name"})}),"\n",(0,c.jsxs)(n.p,{children:["A short designation of the charger defined here. The value is used when referencing the charger in the configuration of the ",(0,c.jsx)(n.a,{href:"loadpoints#charger",children:"charger"}),"."]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"For example"}),":"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-yaml",children:"name: charger1\n"})}),"\n",(0,c.jsx)(n.hr,{}),"\n",(0,c.jsx)(n.h3,{id:"type",children:(0,c.jsx)(n.code,{children:"type"})}),"\n",(0,c.jsxs)(n.p,{children:["This is the evcc-specific charger type that allows communication with the charger. Known chargers can be integrated using the ",(0,c.jsx)(n.code,{children:"template"})," type. The appropriate (template) type can be found under ",(0,c.jsx)(n.a,{href:"/docs/devices/chargers",children:"devices - chargers"}),"."]}),"\n",(0,c.jsxs)(n.p,{children:["For unknown chargers (or for other individual reasons), the default implementation can be used through ",(0,c.jsx)(n.a,{href:"/docs/reference/plugins",children:"Plugins"}),"."]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"For example"}),":"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-yaml",children:"type: custom\n"})}),"\n",(0,c.jsx)(n.hr,{}),"\n",(0,c.jsx)(n.h2,{id:"optional-parameters",children:"Optional Parameters"}),"\n",(0,c.jsx)(n.h3,{id:"integrateddevice",children:(0,c.jsx)(n.code,{children:"integrateddevice"})}),"\n",(0,c.jsx)(n.p,{children:'This parameter causes chargers that operate without a "vehicle" (e.g. heat pump, eBike) to not display a vehicle, thus omitting vehicle detection.'}),"\n",(0,c.jsxs)(n.p,{children:["In connection with this parameter, an icon can also be assigned (see ",(0,c.jsx)(n.a,{href:"/docs/reference/configuration/vehicles#icon",children:(0,c.jsx)(n.code,{children:"vehicle.icon"})}),"), which will then be displayed at the charger."]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"For example"}),":"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-yaml",children:"integrateddevice: true\nicon: bike\n"})}),"\n",(0,c.jsx)(n.hr,{}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{})})]})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(h,{...e})}):h(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>o});var c=r(96540);const i={},t=c.createContext(i);function s(e){const n=c.useContext(t);return c.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),c.createElement(t.Provider,{value:n},e.children)}}}]);